import javax.crypto.Mac
import javax.crypto.spec.SecretKeySpec
import java.nio.charset.StandardCharsets
import java.util.Base64
import groovy.json.JsonBuilder

// --- JWT HS256 (HMAC-SHA256) generator ---
static String createJwtHs256(String secret, String role) {
    def header  = [alg: "HS256", typ: "JWT"]
    long now    = (System.currentTimeMillis() / 1000L) as long
    def payload = [
        sub : "jenkins",
        iss : "api-gateway",
        iat : now,
        exp : now + 300,     // 5 min
        role: role           // <- uzupełnij rolę
    ]

    String hB64 = Base64.getUrlEncoder().withoutPadding()
        .encodeToString(new JsonBuilder(header).toString().getBytes(StandardCharsets.UTF_8))
    String pB64 = Base64.getUrlEncoder().withoutPadding()
        .encodeToString(new JsonBuilder(payload).toString().getBytes(StandardCharsets.UTF_8))

    String signingInput = "${hB64}.${pB64}"
    Mac mac = Mac.getInstance("HmacSHA256")
    mac.init(new SecretKeySpec(secret.getBytes(StandardCharsets.UTF_8), "HmacSHA256"))
    byte[] sig = mac.doFinal(signingInput.getBytes(StandardCharsets.UTF_8))
    String sB64 = Base64.getUrlEncoder().withoutPadding().encodeToString(sig)

    return "${signingInput}.${sB64}"
}

// --- Twoja metoda z nagłówkiem Authorization: Bearer <JWT> ---
String getCycleNumberFromApi() {
    String cycleNumbersApiUrl = "${dockerApplicationInfrastructureLib.defaultWeblogicManagedServerContainerName()}:urls"
    String extractApiUser     = ""

    // UZUPEŁNIJ:
    String secret = "<TWOJ_SECRET>"
    String role   = "<TWOJA_ROLA>"

    String jwt = createJwtHs256(secret, role)

    def response = sh(
        returnStdout: true,
        script: """
            curl -s -o /dev/null -w "%{http_code}" \\
                 -H "Authorization: Bearer ${jwt}" \\
                 --request GET ${cycleNumbersApiUrl}
        """
    ).trim()

    def responseObject = new JsonSlurperClassic().parseText(response)
    return responseObject[0].cycleNumber
}